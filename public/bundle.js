(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// This module makes the fetch calls
// getData fetches the resource that is passed as a parameter using the "POST" method
const API = {
  getData(resource) {
    return fetch(`http://localhost:8088/${resource}`).then(response => response.json());
  },

  getPayloadData(resource, payload) {
    return fetch(`http://localhost:8088/${resource}/${payload}`).then(response => response.json());
  },

  postNewData(resource, payload) {
    return fetch(`http://localhost:8088/${resource}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    });
  }

};
var _default = API; // saveInterest saves new point of interest to database resource "interests" using the "POST" method
// editData edits the parameter passed (cost and review) to current point of interest using "PUT"method
// deleteInterest deletes the point of interest whose id is passed passed as a parameter using the "DELETE" method

exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

var _placesList = _interopRequireDefault(require("./placesList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This module will run the application by calling the necessary functions
_placesList.default.getPlacesList();

},{"./placesList":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _api = _interopRequireDefault(require("./api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This module will provide the placesList to be displayed 
const interests = {
  // This HTML is then returned to the point from where this method was called
  interestBuilder(interestObject) {
    let interestArticle = document.createElement("article");
    interestArticle.setAttribute("id", `interest--${interestObject.id}`);
    let interestName = document.createElement("h3");
    interestName.textContent = interestObject.name;
    let interestDescription = document.createElement("p");
    interestDescription.textContent = interestObject.description;
    let interestCost = document.createElement("p");
    interestCost.textContent = interestObject.cost;
    let editinterestButton = document.createElement("button");
    editinterestButton.textContent = "Edit";
    editinterestButton.addEventListener("click", () => {
      let articleId = event.target.parentNode.id; // research this line more

      let interestId = articleId.split("--")[1];
      interestCollection.getinterest(interestId).then(response => {
        interestEditForm.createAndAppendForm(articleId, response);
      });
    });
    let deleteinterestButton = document.createElement("button");
    deleteinterestButton.textContent = "Delete";
    deleteinterestButton.addEventListener("click", () => {
      let interestId = event.target.parentNode.id.split("--")[1];
      interestCollection.deleteinterest(interestId).then(response => {
        interestsList.getinterest(response);
      });
    });
    interestArticle.appendChild(interestName);
    interestArticle.appendChild(interestDescription);
    interestArticle.appendChild(interestCost);
    interestArticle.appendChild(editinterestButton);
    interestArticle.appendChild(deleteinterestButton);
    return interestArticle;
  }

};
const placesList = {
  getPlacesList() {
    // An empty document fragment
    let placeDocFragment = document.createDocumentFragment(); // 1. Get data
    // The getData method will do a fetch and return a promise. This call will return the data from the API in the response.

    _api.default.getData("places").then(allPlaces => {
      allPlaces.forEach(place => {
        // console.log("place",place)
        // fetch all interests
        _api.default.getData("interests").then(allinterests => {
          // Loop through interests to obtain the interest name,description,cost, and review data
          allinterests.forEach(interest => {
            if (interest.placeId === place.id) {
              let interestHtml = interests.interestBuilder(interest); //   console.log("interestHtml", interestHtml)
              // console.log(interest)

              placeDocFragment.appendChild(interestHtml);
              console.log("placeDocFragment", placeDocFragment);
            }
          }); // 3. Append the HTML to the DOM            

          let outputArticle = document.querySelector(".output__places");
          outputArticle.appendChild(placeDocFragment);
        });
      });
    });
  }

};
var _default = placesList;
exports.default = _default;

},{"./api":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
